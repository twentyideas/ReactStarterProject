/* Store auto-generated by npm run generator */
import ReactJsonTree from "react-json-tree"
import { Theme, Button } from "@material-ui/core"
import { makeStyles, CSSProperties } from "@material-ui/styles"
import { observer } from "mobx-react"
import clsx from "clsx"
import React from "react"
import Store from "store/Store"
import { keys, isFunction, pickBy, reduce } from "lodash"
import { useRootClasses } from "style"
import { toJS } from "mobx"

interface StoreProps {
    className?: string
    style?: CSSProperties
    children?: React.ReactNode
}

const useStyles = makeStyles((theme: Theme) => ({
    debugStoreOrganism: {
        maxWidth: `100vw`
    } as CSSProperties
}))

const DebugStore: React.FC<StoreProps> = props => {
    const classes = useStyles()
    const rootClasses = useRootClasses()
    const className = clsx(classes.debugStoreOrganism, props.className)

    const anyStore = Store as any

    const modules = keys(anyStore).filter(key => !isFunction(anyStore[key]))
    const data = reduce(
        modules,
        (acc, moduleName) => {
            let mod = toJS(anyStore[moduleName])
            const getterKeys = mod._getters

            mod = pickBy(mod, (prop, propName) => !isFunction(prop) && propName !== "store" && propName !== "_getters")
            if (getterKeys && getterKeys.length && getterKeys.forEach) {
                mod["@computed"] = reduce(
                    getterKeys,
                    (acc2: any, getterName: string) => {
                        acc2[getterName] = anyStore[moduleName][getterName]
                        return acc2
                    },
                    {}
                )
            }

            acc[moduleName] = mod
            return acc
        },
        {} as any
    )

    const [selectedModule, setSelectedModule] = React.useState(modules[0] || "")
    const buttons = modules.map(moduleName => (
        <Button
            key={moduleName}
            onClick={() => setSelectedModule(moduleName)}
            variant={selectedModule === moduleName ? "contained" : "outlined"}
            color="primary"
            className={rootClasses.mh1}
        >
            {moduleName}
        </Button>
    ))

    return (
        <div className={className}>
            <div className={clsx(rootClasses.row, rootClasses.itemsCenter)}>{buttons}</div>
            <ReactJsonTree data={data[selectedModule]} />
        </div>
    )
}

export default observer(DebugStore)
